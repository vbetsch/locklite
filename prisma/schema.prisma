generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Business ---

model Vault {
  uuid      String        @id @default(uuid())
  label     String        @db.VarChar(255)
  secret    String
  createdAt DateTime      @default(now())
  members   VaultMember[]
}

model VaultMember {
  id      String @id @default(cuid())
  vaultId String
  userId  String

  vault Vault @relation(fields: [vaultId], references: [uuid], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([vaultId, userId])
  @@index([vaultId])
  @@index([userId])
}

// --- Next Auth ---

model User {
  id               String        @id @default(cuid())
  name             String?
  email            String        @unique
  password         String
  accounts         Account[]
  sessions         Session[]
  vaultMemberships VaultMember[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
