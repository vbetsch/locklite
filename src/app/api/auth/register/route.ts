import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';
import prisma from '@lib/prisma';
import { hash } from 'bcrypt';
import { StatusCodes } from 'http-status-codes';
import type { User } from '@prisma/generated';
/**
 * @swagger
 * tags:
 *   - name: Auth
 *     description: Authentication and user management
 */

/**
 * @swagger
 * /api/auth/register:
 *   post:
 *     summary: Register a new user
 *     tags: [Auth]
 *     requestBody:
 *       description: JSON object containing email and password
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - password
 *             properties:
 *               email:
 *                 type: string
 *                 format: email
 *                 example: user@example.com
 *               password:
 *                 type: string
 *                 format: password
 *                 example: securePassword123
 *     responses:
 *       201:
 *         description: User created successfully
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/User'
 *       400:
 *         description: Bad request (missing email or password)
 *       409:
 *         description: Conflict user already exists
 *       500:
 *         description: Internal server error
 */

/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *           description: Unique identifier generated by the database
 *           example: 'cl0x1a2b3c4d5e6f7g8h9'
 *         email:
 *           type: string
 *           format: email
 *           description: User's email address
 *           example: user@example.com
 */
export async function POST(
  req: NextRequest
): Promise<
  | NextResponse<{ message: string }>
  | NextResponse<{ id: string; email: string }>
> {
  try {
    const { email, password } = await req.json();
    if (!email || !password) {
      return NextResponse.json(
        { message: 'Email and password are required' },
        { status: StatusCodes.BAD_REQUEST }
      );
    }
    const exists: User | null = await prisma.user.findUnique({
      where: { email },
    });
    if (exists) {
      return NextResponse.json(
        { message: 'User already exists' },
        { status: StatusCodes.CONFLICT }
      );
    }
    const salt: number = parseInt(process.env.BCRYPT_SALT_ROUNDS || '10', 10);
    const hashed: string = await hash(password, salt);
    const user: User = await prisma.user.create({
      data: { email, password: hashed },
    });
    return NextResponse.json(
      { id: user.id, email: user.email },
      { status: StatusCodes.CREATED }
    );
  } catch {
    return NextResponse.json(
      { message: 'Internal server error' },
      { status: StatusCodes.INTERNAL_SERVER_ERROR }
    );
  }
}
